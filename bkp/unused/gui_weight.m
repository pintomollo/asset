function varargout = gui_weight(varargin)
% GUI_WEIGHT_EXPORT M-file for gui_weight_export.fig
%      GUI_WEIGHT_EXPORT, by itself, creates a new GUI_WEIGHT_EXPORT or raises the existing
%      singleton*.
%
%      H = GUI_WEIGHT_EXPORT returns the handle to a new GUI_WEIGHT_EXPORT or the handle to
%      the existing singleton*.
%
%      GUI_WEIGHT_EXPORT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUI_WEIGHT_EXPORT.M with the given input arguments.
%
%      GUI_WEIGHT_EXPORT('Property','Value',...) creates a new GUI_WEIGHT_EXPORT or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before gui_weight_export_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to gui_weight_export_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

if (nargin == 0)
  fname = {'1056-14-inc_med-060711_1_'};
  type = 'domain_center';
else
  fname = varargin(1);

  if (any(fname{1} == '*'))
    files = dir(fname{1});
    fname = cell(length(files), 1);

    for i=1:length(fname)
      fname{i} = files(i).name;
    end
  end

  if (nargin > 1)
    type = varargin{2};
  else
    type = 'domain_center';
  end
end
  
  kymo = load(fname{1});
  domain = [];
  params = [];
  display_result = false;
  debug_mode = false;
  load_data;

  curr_indx = 1;

  haxes = gui_weight_export_LayoutFcn;
  update_display;

function load_data

  switch type
    case 'domain_center'
      kymo.opts.recompute = false;
      [domain, ruffles, theta] = gather_quantification(kymo.mymovie, kymo.opts);
  %    domain = imnorm(domain);
  %    domain = imadjust(domain);
%  minmax = prctile(domain(isfinite(domain)), [0.1 99.9]);
%  domain = imnorm(domain, minmax(1), minmax(2));

  bads = isnan(domain);
  domain = inpaint_nans(domain);
  domain = gaussian_mex(domain, 0.67);
  domain(bads) = NaN;
  domain = imnorm(domain);

      if (~isempty(params))
        params.weights.filt = ruffles;
        params.params.init = (1-exp(-theta.^2/(2*(params.params.spawn_percentile(1)/10)^2)));
      else
        kymo.opts = load_parameters(kymo.opts, 'domain_center.txt');
        kymo.opts.quantification.weights.filt = ruffles;
        kymo.opts.quantification.params.init = (1-exp(-theta.^2/(2*(kymo.opts.quantification.params.spawn_percentile(1)/10)^2)));
        params = kymo.opts.quantification;
      end
    case 'domain_expansion'

      kymo.opts = load_parameters(kymo.opts, 'domain_center.txt');
      kymo.opts.recompute = false;
      
      %{
      [domain, ruffles, theta] = gather_quantification(kymo.mymovie, kymo.opts);
      domain = imnorm(domain);
      kymo.opts.quantification.weights.filt = ruffles;
      kymo.opts.quantification.weights.path = theta;
      kymo.mymovie.data.domain = dynamic_programming(domain, kymo.opts.quantification.params, kymo.opts.quantification.scoring_func, kymo.opts.quantification.weights, kymo.opts);

      [domain, ruffles, pos, indx] = align_domain(domain, ruffles, kymo.mymovie.data.domain, kymo.opts);
      [domain, boundary] = crop_domain(domain, indx);

      kymo.opts = load_parameters(kymo.opts, 'domain_expansion.txt');
      time = get_manual_timing(kymo.mymovie, kymo.opts);
      domain = domain(1:time(end), :);
      domain(~isfinite(domain)) = 0;
      domain = imfilter(domain, fspecial('average', [5, 3]), 'replicate');
      boundary = (size(domain, 2)-1)/2;
      domain = domain(:,[boundary+1:end]) + domain(:,[boundary+1:-1:1]);
      domain = imnorm(domain);
      %}

      kymo.opts = load_parameters(kymo.opts, 'domain_expansion.txt');
      time = get_manual_timing(kymo.mymovie, kymo.opts);
      [fraction, max_width, cell_width, domain, pos, path_center] = domain_expansion(kymo.mymovie, kymo.opts);
      center = ((size(domain, 2) - 1)/2)+1;
      %domain = inpaint_nans(domain);
      %domain = nanmean(cat(3, domain(:, center:end), domain(:,center:-1:1)), 3);
      %domain = gaussian_mex(domain, 0.67);

      %bads = isnan(domain);
      %domain = inpaint_nans(domain);
      %domain = gaussian_mex(domain, 0.67);
      %domain(bads) = NaN;

      %domain = domain(:, center:end) + domain(:,center:-1:1);
      domain = nanmean(cat(3, domain(:, center:end), domain(:,center:-1:1)), 3);
      domain = imnorm(domain(1:time(end), :));

      if (isempty(params))
        params = kymo.opts.segmentation_parameters.domain_expansion;
        params.params = params.cortex_params;
        params.weights = params.cortex_weights;
      end
  end
  
end

function update_display

  if (display_result)
    path = dynamic_programming(domain, params.params, params.scoring_func, params.weights, kymo.opts);
    imagesc(domain, 'Parent', haxes);
    hold(haxes, 'on');
    plot(haxes, path, 1:length(path), 'k');
    hold(haxes, 'off');
  else
    img = params.scoring_func(domain, params.weights);
    imagesc(img, 'Parent', haxes);
  end
  title(haxes, [num2str([params.weights.alpha params.weights.beta params.weights.gamma params.weights.delta]) ' | ' num2str([params.params.alpha params.params.beta params.params.gamma params.params.delta]) ' (' num2str(params.params.spawn_percentile) ')']);

  if (debug_mode)
    keyboard
  end

end

function slider11_Callback(hObject, eventdata, handles)
% hObject    handle to slider1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

params.params.alpha = get(hObject,'Value');
update_display;

end

% --- Executes on slider movement.
function slider12_Callback(hObject, eventdata, handles)
% hObject    handle to slider2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
params.params.beta = get(hObject,'Value');
update_display;

end

% --- Executes on slider movement.
function slider13_Callback(hObject, eventdata, handles)
% hObject    handle to slider3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

params.params.gamma = get(hObject,'Value');
update_display;

end

% --- Executes on slider movement.
function slider14_Callback(hObject, eventdata, handles)
% hObject    handle to slider4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

params.params.delta = get(hObject,'Value');
update_display;

end

% --- Executes on slider movement.
function slider15_Callback(hObject, eventdata, handles)
% hObject    handle to slider4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

params.params.spawn_percentile = get(hObject,'Value');
update_display;

end

function slider1_Callback(hObject, eventdata, handles)
% hObject    handle to slider1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

params.weights.alpha = get(hObject,'Value');
update_display;

end

% --- Executes on slider movement.
function slider2_Callback(hObject, eventdata, handles)
% hObject    handle to slider2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
params.weights.beta = get(hObject,'Value');
update_display;

end

% --- Executes on slider movement.
function slider3_Callback(hObject, eventdata, handles)
% hObject    handle to slider3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

params.weights.gamma = get(hObject,'Value');
update_display;

end

% --- Executes on slider movement.
function slider4_Callback(hObject, eventdata, handles)
% hObject    handle to slider4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

params.weights.delta = get(hObject,'Value');
update_display;

end

% --- Executes on slider movement.
function debug_Callback(hObject, eventdata, handles)
% hObject    handle to slider4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slide

debug_mode = get(hObject,'Value');
update_display;

end
% --- Executes on slider movement.
function display_Callback(hObject, eventdata, handles)
% hObject    handle to slider4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slide

display_result = get(hObject,'Value');
update_display;

end
% --- Executes on slider movement.
function choice_Callback(hObject, eventdata, handles)
% hObject    handle to slider4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

indx = get(hObject,'Value');

if (indx ~= curr_indx)
  strings = get(hObject,'String');
  kymo = load(strings{indx});
  kymo.opts.recompute = false;
  load_data;
  %[domain, ruffles, theta] = gather_quantification(kymo.mymovie, kymo.opts);
  %domain = imnorm(domain);
  %weights.filt = ruffles;

  curr_indx = indx;
  update_display;
end

end

% --- Creates and returns a handle to the GUI figure. 
function h2 = gui_weight_export_LayoutFcn
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

h1 = figure(...
'MenuBar','none',...
'Name','gui_weight',...
'NumberTitle','off',...
'Units','characters',...
'Position',[104 29 115 32],...
'Resize','off',...
'HandleVisibility','callback',...
'Tag','figure1',...
'UserData',[],...
'Visible','on');


fig_color = get(h1, 'Color');

h2 = axes(...
'Parent',h1,...
'Units','characters',...
'Position',[5 3 68 27],...
'CameraPosition',[0.5 0.5 9],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'Tag','axes1');

%'Callback',@(hObject,eventdata)gui_weight_export('slider1_Callback',hObject,eventdata,guidata(hObject)),...

h7 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@slider1_Callback,...
'Position',[78 28 15 2],...
'String',{  'Slider' },...
'Style','slider',...
'Min', 0, ...
'Max', 1, ...
'Value', params.weights.alpha, ...
'Tag','slider1');

h8 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Position',[78 25 15 2],...
'Callback',@slider2_Callback,...
'String',{  'Slider' },...
'Min', 0, ...
'Max', 1, ...
'Style','slider',...
'Value', params.weights.beta, ...
'Tag','slider2');

h9 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@slider3_Callback,...
'Position',[78 22 15 2],...
'String',{  'Slider' },...
'Min', 0, ...
'Max', 1, ...
'Style','slider',...
'Value', params.weights.gamma, ...
'Tag','slider3');

h10 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@slider4_Callback,...
'Position',[78 19 15 2],...
'String',{  'Slider' },...
'Min', 0, ...
'Max', 1, ...
'Style','slider',...
'Value', params.weights.delta, ...
'Tag','slider4');

h17 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@slider11_Callback,...
'Position',[93 28 15 2],...
'String',{  'Slider' },...
'Style','slider',...
'Min', 0, ...
'Max', 1, ...
'Value', params.params.alpha, ...
'Tag','slider11');

h18 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Position',[93 25 15 2],...
'Callback',@slider12_Callback,...
'String',{  'Slider' },...
'Min', 0, ...
'Max', 1, ...
'Style','slider',...
'Value', params.params.beta, ...
'Tag','slider12');

h19 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@slider13_Callback,...
'Position',[93 22 15 2],...
'String',{  'Slider' },...
'Min', 0, ...
'Max', 1, ...
'Style','slider',...
'Value', params.params.gamma, ...
'Tag','slider13');

h20 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@slider14_Callback,...
'Position',[93 19 15 2],...
'String',{  'Slider' },...
'Min', 0, ...
'Max', 1, ...
'Style','slider',...
'Value', params.params.delta, ...
'Tag','slider14');

if (params.params.spawn_percentile(1) > 1)

  h20 = uicontrol(...
  'Parent',h1,...
  'Units','characters',...
  'BackgroundColor',[0.9 0.9 0.9],...
  'Callback',@slider15_Callback,...
  'Position',[93 16 15 2],...
  'String',{  'Slider' },...
  'Min', 1, ...
  'Max', 100, ...
  'Style','slider',...
  'Value', params.params.spawn_percentile(1), ...
  'Tag','slider14');

else

  h20 = uicontrol(...
  'Parent',h1,...
  'Units','characters',...
  'BackgroundColor',[0.9 0.9 0.9],...
  'Callback',@slider15_Callback,...
  'Position',[93 16 15 2],...
  'String',{  'Slider' },...
  'Min', 0, ...
  'Max', 1, ...
  'Style','slider',...
  'Value', params.params.spawn_percentile(1), ...
  'Tag','slider14');
end

h01 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',fig_color,...
'Position',[77 30 7 1.5],...
'String','weights',...
'Style','text',...
'Tag','text1');

h02 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',fig_color,...
'Position',[97 30 7 1.5],...
'String','params',...
'Style','text',...
'Tag','text1');


h11 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',fig_color,...
'Position',[90 27 7 1.5],...
'String','alpha',...
'Style','text',...
'Tag','text1');

h12 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',fig_color,...
'Position',[90 24 7 1.5],...
'String','beta',...
'Style','text',...
'Tag','text2');

h13 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',fig_color,...
'Position',[90 21 7 1.5],...
'String','gamma',...
'Style','text',...
'Tag','text3');

h14 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',fig_color,...
'Position',[90 18 7 1.5],...
'String','delta',...
'Style','text',...
'Tag','text4');

h18 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',fig_color,...
'Position',[97 15 9 1.5],...
'String','spawning',...
'Style','text',...
'Tag','text4');


h15 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'Position',[78 4 35 1],...
'Style','popupmenu',...
'Callback',@choice_Callback,...
'String', fname, ...
'Tag','choice');

h16 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@display_Callback,...
'Position',[78 12 3 3],...
'Style','checkbox',...
'Value', 0, ...
'Tag','draw_result');

h16 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@debug_Callback,...
'Position',[78 9 3 3],...
'Style','checkbox',...
'Value', 0, ...
'Tag','draw_result');


h17 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'BackgroundColor',fig_color,...
'Position',[81 12.5 20 1.5],...
'String','Display result',...
'Style','text',...
'Tag','text5');
end

end
